<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:s3="http://www.mulesoft.org/schema/mule/s3"
	xmlns:java="http://www.mulesoft.org/schema/mule/java"
	xmlns:os="http://www.mulesoft.org/schema/mule/os" xmlns:websocket="http://www.mulesoft.org/schema/mule/websocket" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/websocket http://www.mulesoft.org/schema/mule/websocket/current/mule-websocket.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd
http://www.mulesoft.org/schema/mule/java http://www.mulesoft.org/schema/mule/java/current/mule-java.xsd
http://www.mulesoft.org/schema/mule/s3 http://www.mulesoft.org/schema/mule/s3/current/mule-s3.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<flow name="skd-piano-lesson-data-handle-ws-data-flow" doc:id="4e1101ce-a983-4b4a-a4d1-901fce79374d" >
		<set-variable value='#[attributes.headers."sec-websocket-key"]' doc:name="Set Variable wskey" doc:id="69e56c64-8a45-43e2-a8ff-841cdef46c54" variableName="wskey" />
		<os:contains doc:name="Contains wsmap" doc:id="5d6ac648-6f60-45fd-8b01-de1d3d8e406d" key="#[vars.wskey]" objectStore="Object_store_wsmap" target="hasWsmap" />
		<choice doc:name="Choice" doc:id="bc5f51b0-f0e3-47b7-aa3c-4320053b9e77" >
			<when expression="#[vars.hasWsmap == true]" >
				<choice doc:name="Choice mimeType check" doc:id="7d7e2dad-cb4a-4a72-8098-4d6647db86c8" >
					<when expression='#[payload.^mediaType != "application/octet-stream; charset=UTF-8"]' >
						<raise-error doc:name="Raise error not octet-stream" doc:id="6c4792e1-a1a6-4529-931c-829a045eae92" type="WS:INVALID_INITIATION" description="Invalid Initiation Message" />
					</when>
				</choice>
				<os:contains doc:name="Contains cache" doc:id="e6ff6008-cb73-417f-8a10-9e296546022c" key="#[vars.wskey]" objectStore="Object_store_cache" target="hasCache" />
				<choice doc:name="Choice cache  exists" doc:id="f46390be-c622-4a2c-9c1f-863f8562eeb6" >
					<when expression="#[vars.hasCache == false]" >
						<os:store doc:name="Store cache" doc:id="7fef21fd-f27b-4cae-9e66-4bc0c3ecfbd0" key="#[vars.wskey]" objectStore="Object_store_cache" />
					</when>
					<otherwise >
						<os:retrieve doc:name="Retrieve cache" doc:id="ed912fb1-ee8b-4b17-8cde-278b9908fb78" key="#[vars.wskey]" objectStore="Object_store_cache" target="cache" />
						<java:invoke-static method="append(byte[],byte[])" doc:name="Invoke static append cache" doc:id="e541e522-8f10-46a5-9326-7997645a4b5c" class="com.skd.pianolesson.BinaryUtils" target="newCache" >
							<java:args ><![CDATA[#[{a: vars.cache, b: payload}]]]></java:args>
						</java:invoke-static>
						<choice doc:name="Choice" doc:id="7d844d39-c3a6-4c86-89c5-c21f761f3889">
							<when expression="#[sizeOf(vars.newCache) &gt; 5 * 1024 * 1024]">
								<set-payload value="#[vars.newCache as Binary]" doc:name="Set Payload upload data" doc:id="379e44f4-d62d-42a9-b495-bb8c9839ed7a" />
								<flow-ref doc:name="Flow Reference s3 upload" doc:id="80b3b4b6-b034-449c-b057-14d2cab11651" name="skd-piano-lesson-data-s3-upload-flow"/>
								<os:remove doc:name="Remove cache" doc:id="b288210a-f50f-4666-9a27-a993fd0badbb" key="#[vars.wskey]" objectStore="Object_store_cache"/>
							</when>
							<otherwise >
								<os:store doc:name="Store new cache" doc:id="65107f7e-13bd-4c9c-ae7b-6c617a83e59d" key="#[vars.wskey]" objectStore="Object_store_cache">
							<os:value><![CDATA[#[vars.newCache]]]></os:value>
						</os:store>
								<logger level="INFO" doc:name="Logger" doc:id="13fcc7fc-5b1b-4abd-976d-0e5cc2baa168" message="#[sizeOf(vars.newCache)]" />
							</otherwise>
						</choice>
					</otherwise>
				</choice>
			</when>
			<otherwise >
				<choice doc:name="Choice mimeType check" doc:id="1ca6cd19-7789-4662-b6da-f93ddd28a1b7" >
					<when expression='#[payload.^mediaType != "text/plain; charset=UTF-8"]' >
						<raise-error doc:name="Raise error" doc:id="23f357bc-fa4e-4627-b145-9b57c96cb076" type="WS:INVALID_INITIATION" description="Invalid Initiation Message" />
					</when>
					<otherwise>
						<ee:transform doc:name="Transform Message deserialize" doc:id="744f2814-3be7-4464-a519-5dd900e57cf3">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
read(payload,"application/json")]]></ee:set-payload>
							</ee:message>
						</ee:transform>
						<set-variable value="#[payload.recording_id]" doc:name="Set Variable recording_id" doc:id="a99ee8df-bbd4-489a-a29b-9a81bce3958f" variableName="recording_id" />
					</otherwise>
				</choice>
				<logger level="INFO" doc:name="Logger" doc:id="fd67a89c-32c1-47a6-ace7-006eed4f94dd" message="#[payload]"/>
				<os:store doc:name="Store recording_id in wsmap" doc:id="22893726-d2aa-479e-aee6-095a940eacdd" key="#[vars.wskey]" objectStore="Object_store_wsmap" >
					<os:value ><![CDATA[#[vars.recording_id]]]></os:value>
				</os:store>
				<os:store doc:name="Store wskey in wsmap" doc:id="8d85e29d-8d52-4dca-a887-bf730f5746f3" key="#[vars.recording_id]" objectStore="Object_store_wsmap" >
					<os:value ><![CDATA[#[vars.wskey]]]></os:value>
				</os:store>
			</otherwise>
		</choice>
	</flow>
	<flow name="skd-piano-lesson-data-s3-upload-flow" doc:id="d006e8a0-66c5-46da-b7f7-a23b51299b10" >
		<os:retrieve doc:name="Retrieve wsMap" doc:id="455fbea6-600b-478e-9077-9e8b36f23c31" key="#[vars.wskey]" objectStore="Object_store_wsmap" target="recording_id"/>
		<logger level="INFO" doc:name="Logger" doc:id="b66249f3-59b9-43c9-a735-5bc23fb2a597" message="#[vars.recording_id]"/>
		<set-variable value="#[sizeOf(payload as Binary)]" doc:name="Set Variable data_size" doc:id="0fdc9b39-f9ea-46f4-89c3-602ce19fe3a4" variableName="data_size"/>
		<logger level="INFO" doc:name="Logger" doc:id="aa6df980-0550-4724-b52a-cdb8682cd976" message='#["size=" ++ vars.data_size]'/>
		<os:retrieve doc:name="Retrieve upload" doc:id="ee90b47d-6449-4048-b6c7-19ba5e7fefd1" key="#[vars.recording_id]" objectStore="Object_store_Uploads" target="upload"/>
		<logger level="INFO" doc:name="Logger" doc:id="2bd9be4f-3e2d-462f-8cc5-8a4eb2c059cf" message="#[vars.upload]"/>
		<s3:upload-part partSize="#[vars.data_size]" doc:name="Upload part" doc:id="8de3ae9e-d01a-44ab-8b29-4c04771bd1d0" config-ref="Amazon_S3_Configuration" bucketName="#[vars.upload.bucket]" key="#[vars.upload.key]" uploadId="#[vars.upload.upload_id]" partNumber="#[vars.upload.part_number as Number + 1]" target="uploadResult">
			<s3:content ><![CDATA[#[payload as Binary]]]></s3:content>
		</s3:upload-part>
		<logger level="INFO" doc:name="Logger upload part result" doc:id="e25bb1a1-0da0-4a91-9b17-12aeab770a48" message="#[vars.uploadResult]"/>
		<set-variable value='#[output application/java --- {
	"upload_id": vars.upload.upload_id,
	"bucket": vars.upload.bucket,
	"key": vars.upload.key,
	"part_number": (vars.upload.part_number as Number) + 1,
	"etags": (vars.upload.etags default []) ++ [vars.uploadResult],
	"len": (vars.upload.len as Number) + vars.data_size
}]' doc:name="Set Variable newUpload" doc:id="abbe336e-79f1-4bd7-8a4a-5ce553177dc9" variableName="newUpload"/>
		<logger level="INFO" doc:name="Logger" doc:id="1077c46d-b4e3-4485-bffa-488f0f559383" message="#[vars.newUpload]"/>
		<os:store doc:name="Store update uploads" doc:id="f01800b5-d1fe-4d27-899e-6ca82b2c8716" key="#[vars.recording_id]" objectStore="Object_store_Uploads">
			<os:value ><![CDATA[#[vars.newUpload]]]></os:value>
		</os:store>
	</flow>
</mule>
